#!/usr/bin/env python

import os
import lsd
import lsd.colgroup as colgroup
import lsd.bounds
import numpy as np
import scipy.stats.mstats
from itertools import izip
from collections import defaultdict
from lsd.join_ops import IntoWriter
from scipy.weave import inline
import logging
import cPickle
import shutil
import lsd.tui
import sys
from lsd.builtins import FileTable


def calc_stats(qresult, db, tabname):
    """
    Compute statistics from merged detections.

    Compute median, average, SIQR, chi2dof per object.
    """
    if True:
        ids = []
        for all_rows in colgroup.partitioned_fromiter(qresult, "_ID", 20*1000*1000, blocks=True):
            test = calc_stats_aux(all_rows, db, tabname)
#            ids.append(calc_stats_aux(all_rows, db, tabname))
            if test[0] != 0:
                ids.append(test)
                all_rows = None
            else:
                print "Sranje u "+str(qresult.static_cell)
        if len(ids) > 0:
            ids = np.concatenate(ids)
    else:
        all_rows = colgroup.fromiter(qresult, blocks=True)
        ids = calc_stats_aux(all_rows, db, tabname)
        all_rows = None

    assert np.all(np.sort(ids) == np.unique(ids))

#    import hashlib
#    print qresult.static_cell, hashlib.md5(np.sort(ids)).hexdigest(), len(ids)

    yield len(ids)


def calc_stats_aux(all_rows, db, tabname):
    """
    Compute statistics from merged detections.

    Compute median, average, SIQR, chi2dof per object.
    """

    # Sort
    if 'mag' in all_rows:
        all_rows.sort(["_ID", "filterid", "mag"])

        # Prepare the output array
        objs, idx = np.unique(all_rows['_ID'], return_index=True)
        out = colgroup.ColGroup(
            dtype=[
                ('obj_id', 'u8'),
                ('ra', 'f8'), ('dec', 'f8'),
                ('nmag', '2u2'), ('nmag_ok', '2u2'),
                ('ra_med', 'f8'), ('dec_med', 'f8'),
                ('ra_rms', 'f4'), ('dec_rms', 'f4'),
                ('ra_mean', 'f8'), ('dec_mean', 'f8'),
                ('ra_stdev', 'f4'), ('dec_stdev', 'f4'),
                ('mag_wmean', '2f4'), ('mag_wstdev', '2f4'), ('merr', '2f4'),
                ('mag_med', '2f4'), ('mag_rms', '2f4'),
                ('chi2dof', '2f4'), ('mag_wskew', '2f4'),
                ('mag_q5', '2f4'), ('mag_q95', '2f4'),
                ('mag_min', '2f4'), ('mag_max', '2f4'),
                ('delta_t', '2f4')
                ],
                size=len(objs)
            )
        out['obj_id'][:] = objs
        out['ra'][:]  = all_rows['ra0'][idx]
        out['dec'][:] = all_rows['dec0'][idx]

    # Pull out the arrays we'll be using
        (id_out, ra, dec, nmag, nmag_ok, ra_med, dec_med, ra_rms, dec_rms, ra_mean, dec_mean, ra_stdev, dec_stdev, mag_wmean, mag_wstdev, merr, mag_med, mag_rms, chi2dof, mag_wskew, mag_q5, mag_q95, mag_min, mag_max, delta_t) = out.as_columns()
        id_in, ras, decs, mags, errs, filterid, flags, mjds = ( getattr(all_rows, attr) for attr in ['_ID', 'ra', 'dec', 'mag', 'err', 'filterid', 'imflags', 'mjd'] )

    # Convert filterid to index
        band = np.empty(len(all_rows), dtype='u4')
        for f, i in { 1: 0, 2: 1 }.iteritems():
            band[filterid == f] = i

        code = \
        """
    #line 97 "objdata_weave.py"

    assert(Sid_out[0] == sizeof(*id_out));    // Make sure we've got a contiguous array

    uint32_t bad_astro = SATELLITE ;
    uint32_t bad_photo = SATELLITE | HIGH_DARK | HOT_PIXEL | CCD_BLEED | RAD_HIT | SATURATED_PIXEL | DEAD_PIXEL | NAN_PIXEL | DIRT;

    // stream through the input arrays
    int size = Nmags[0];
    std::vector<double> magsg, wtg, mjdsg, magsR, wtR, mjdsR, ras1, decs1;
    for(int i = 0, j = 0; i != size; i = j)
    {
        j = i;
        int nobsg = 0, nobsR = 0;
        ras1.clear(); decs1.clear(); magsg.clear(); wtg.clear(); magsR.clear(); wtR.clear();
        while(j != size && id_in[i] == id_in[j])
        {
            double ra = RAS1(j);
            double dec = DECS1(j);
            float mag = MAGS1(j);
            float err = ERRS1(j);
            float mjd = MJDS1(j);
            uint32_t flag = FLAGS1(j);

            if(std::isfinite(ra) && std::isfinite(dec) && ((flag & bad_astro) == 0))
            {
                ras1.push_back(ra);
                decs1.push_back(dec);
            }

            if(std::isfinite(mag) && ((flag & bad_photo) == 0))
            {
                if(band[j] == 0)
                {
                    magsg.push_back(mag);
                    mjdsg.push_back(mjd);
                    wtg.push_back(1. / (err*err)); // add systematic error in quadrature
                } else {
                    magsR.push_back(mag);
                    mjdsR.push_back(mjd);
                    wtR.push_back(1. / (err*err)); // add systematic error in quadrature
                }
            }
            if(std::isfinite(mag))
            {
                if(band[j] == 0)
                {
                    nobsg++;
                } else {
                    nobsR++;
                }

            }

            j++;

            // find where to store
            int row = std::lower_bound(id_out, id_out + Nid_out[0], id_in[i]) - id_out;
            assert(id_out[row] == id_in[i]);
            assert(0 <= row && row < Nid_out[0]);

            // store number of elements (all and good)
            NMAG2(row, 0) = nobsg;
            NMAG2(row, 1) = nobsR;
            NMAG_OK2(row, 0) = magsg.size();
            NMAG_OK2(row, 1) = magsR.size();

            if (!ras1.empty())
            {
                // sort RA and Dec
                gsl_sort(&ras1[0], 1, ras1.size());
                gsl_sort(&decs1[0], 1, decs1.size());

                RA_MED1(row) = gsl_stats_quantile_from_sorted_data(&ras1[0], 1, ras1.size(), 0.50);
                RA_RMS1(row) = 0.741*3600.*(gsl_stats_quantile_from_sorted_data(&ras1[0], 1, ras1.size(), 0.75) - gsl_stats_quantile_from_sorted_data(&ras1[0], 1, ras1.size(), 0.25));

                DEC_MED1(row) = gsl_stats_quantile_from_sorted_data(&decs1[0], 1, decs1.size(), 0.50);
                DEC_RMS1(row) = 0.741*3600.*(gsl_stats_quantile_from_sorted_data(&decs1[0], 1, decs1.size(), 0.75) - gsl_stats_quantile_from_sorted_data(&decs1[0], 1, decs1.size(), 0.25));

                // mean statistics
                RA_MEAN1(row)   = gsl_stats_mean(&ras1[0], 1, ras1.size());
                RA_STDEV1(row)  = 3600.*fabs(gsl_stats_sd(&ras1[0], 1, ras1.size())); // I wrap it in fabs because for N=0 it returns a -0 (??)

                DEC_MEAN1(row)  = gsl_stats_mean(&decs1[0], 1, decs1.size());
                DEC_STDEV1(row) = 3600.*fabs(gsl_stats_sd(&decs1[0], 1, decs1.size()));
            }

            if(!magsg.empty())
            {
                // median statistics
                MAG_MED2(row, 0) = gsl_stats_quantile_from_sorted_data(&magsg[0], 1, magsg.size(), 0.50);
                MAG_RMS2(row, 0) = 0.741*(gsl_stats_quantile_from_sorted_data(&magsg[0], 1, magsg.size(), 0.75) - gsl_stats_quantile_from_sorted_data(&magsg[0], 1, magsg.size(), 0.25));

                // 5-th and 95-th quantile
                MAG_Q52(row, 0) = gsl_stats_quantile_from_sorted_data(&magsg[0], 1, magsg.size(), 0.05);
                MAG_Q952(row, 0) = gsl_stats_quantile_from_sorted_data(&magsg[0], 1, magsg.size(), 0.95);

                // minimum and maximum magnitude (by value)
                MAG_MIN2(row, 0) = gsl_stats_min(&magsg[0], 1, magsg.size());
                MAG_MAX2(row, 0) = gsl_stats_max(&magsg[0], 1, magsg.size());

                // time span of good observations
                DELTA_T2(row, 0) = gsl_stats_max(&mjdsg[0], 1, mjdsg.size()) - gsl_stats_min(&mjdsg[0], 1, mjdsg.size());

                // weighted skewness
                MAG_WSKEW2(row, 0) = gsl_stats_wskew(&wtg[0], 1, &magsg[0], 1, magsg.size());

                // weighted mean and weighted standard deviation
                MAG_WMEAN2(row, 0)  = gsl_stats_wmean(&wtg[0], 1, &magsg[0], 1, magsg.size());
                MAG_WSTDEV2(row, 0) = fabs(gsl_stats_wsd(&wtg[0], 1, &magsg[0], 1, magsg.size()));

                // mean error computed as 1./sum(wts)
                double w = 0.;
                double chi = 0.;
                for(int i = 0; i != wtg.size(); i++)
                {
                    w += wtg[i];
                    chi += ( (magsg[i]-MAG_WMEAN2(row, 0))*(magsg[i]-MAG_WMEAN2(row, 0))   )*wtg[i];
                }
                MERR2(row, 0) = 1. / sqrt(w);
                CHI2DOF2(row, 0) = chi/(wtg.size()-1);
            }

            if(!magsR.empty())
            {
                // median statistics
                MAG_MED2(row, 1) = gsl_stats_quantile_from_sorted_data(&magsR[0], 1, magsR.size(), 0.50);
                MAG_RMS2(row, 1) = 0.741*(gsl_stats_quantile_from_sorted_data(&magsR[0], 1, magsR.size(), 0.75) - gsl_stats_quantile_from_sorted_data(&magsR[0], 1, magsR.size(), 0.25));

                // 5-th and 95-th quantile
                MAG_Q52(row, 1) = gsl_stats_quantile_from_sorted_data(&magsR[0], 1, magsR.size(), 0.05);
                MAG_Q952(row, 1) = gsl_stats_quantile_from_sorted_data(&magsR[0], 1, magsR.size(), 0.95);

                // minimum and maximum magnitude (by value)
                MAG_MIN2(row, 1) = gsl_stats_min(&magsR[0], 1, magsR.size());
                MAG_MAX2(row, 1) = gsl_stats_max(&magsR[0], 1, magsR.size());

                // time span of good observations
                DELTA_T2(row, 1) = gsl_stats_max(&mjdsR[0], 1, mjdsR.size()) - gsl_stats_min(&mjdsR[0], 1, mjdsR.size());

                // weighted skewness
                MAG_WSKEW2(row, 1) = gsl_stats_wskew(&wtR[0], 1, &magsR[0], 1, magsR.size());

                // weighted mean and weighted standard deviation
                MAG_WMEAN2(row, 1)  = gsl_stats_wmean(&wtR[0], 1, &magsR[0], 1, magsR.size());
                MAG_WSTDEV2(row, 1) = fabs(gsl_stats_wsd(&wtR[0], 1, &magsR[0], 1, magsR.size()));

                // mean error computed as 1./sum(wts)
                double w = 0.;
                double chi = 0.;
                for(int i = 0; i != wtR.size(); i++)
                {
                    w += wtR[i];
                    chi += ( (magsR[i]-MAG_WMEAN2(row, 1))*(magsR[i]-MAG_WMEAN2(row, 1))   )*wtR[i];
                }
                MERR2(row, 1) = 1. / sqrt(w);
                CHI2DOF2(row, 1) = chi/(wtR.size()-1);
            }
        }
    }
        """
        inline(code,
            ['id_out', 'nmag', 'nmag_ok', 'ra_med', 'dec_med', 'ra_rms', 'dec_rms', 'ra_mean', 'dec_mean', 'ra_stdev', 'dec_stdev', 'mag_wmean', 'mag_wstdev', 'merr', 'mag_med', 'mag_rms', 'chi2dof', 'mag_wskew', 'mag_q5', 'mag_q95', 'mag_min', 'mag_max', 'delta_t', 'id_in', 'ras', 'decs', 'mags', 'errs', 'band', 'flags', 'mjds'],
            headers=['"imflags.h"', '<cmath>', '<iostream>', '<vector>', '<gsl/gsl_statistics.h>', '<gsl/gsl_sort.h>', '<cassert>', '<algorithm>'],
            libraries=['gsl', 'gslcblas'],
            include_dirs=['.'],
            verbose=0,
            undef_macros=['NDEBUG'])

        # Write out the result
        ids = db.table(tabname).append(out, _update=True)
        assert np.all(ids == out.obj_id)
        return ids
    else:
        return(np.asarray([0]))


db = lsd.DB('/home/bsesar/projects/DB')
#bounds = None
bounds = [ (lsd.bounds.rectangle(330, -1.23, 360, 1.23), lsd.bounds.intervalset((-np.inf, np.inf))) ]

# register UDFs
zp=FileTable('/scr/bsesar/projects/rrlyr/PTF/S82/zps.txt', dtype='u4, f4')
sys_err=FileTable('/scr/bsesar/projects/rrlyr/PTF/S82/sys_err.txt', dtype='u4, f4')
db.register_udf(zp, name='zp')
db.register_udf(sys_err, name='sys_err')


q = db.query("SELECT _ID, ptf_det.ra as ra, ptf_det.dec as dec, ptf_obj.ra as ra0, ptf_obj.dec as dec0, mag_abs/1000.-zp(pid) as mag, sqrt((magerr_abs/1000.)**2+(sys_err(pid))**2) as err, fid as filterid, imaflags_iso as imflags, mjd FROM ptf_obj, ptf_det, ptf_exp WHERE ((flags & 1) == 0) & (flags < 8) & (apbsrms > 0) & (mag > 10) & (mag < 21) & (err < 1.0)")
nrows = 0

with db.transaction():
    for rows_added in q.execute([(calc_stats, db, 'S82_stats')], group_by_static_cell=True, bounds=bounds):
        nrows += rows_added

print "Total objects:", nrows22
